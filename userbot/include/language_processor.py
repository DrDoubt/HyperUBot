# Copyright 2020 nunopenim @github
# Copyright 2020 prototype74 @github
#
# Licensed under the PEL (Penim Enterprises License), v1.0
#
# You may not use this file or any of the content within it, unless in
# compliance with the PE License

from userbot import UBOT_LANG
from importlib import import_module
from logging import getLogger
from sys import _getframe

log = getLogger(__name__)

# Language selector logic

try:
    lang = import_module("userbot.translations." + UBOT_LANG)
except:
    log.warning("There was a problem loading the '{}' language file. Make sure it exists! "
                "Should have the same name as the UBOT_LANG variable in config.py. "
                "Attempting to load default language".format(UBOT_LANG))
    try:
        lang = import_module("userbot.translations.en")
    except:
        log.error("English language file not found, bot quitting!")
        quit(1)

try:
    if lang.__name__ == "userbot.translations.en":
        dlang = lang
    else:
        dlang = import_module("userbot.translations.en")
except:
    log.error("English language file not found, bot quitting!")
    quit(1)

# Language processor!

def getLangString(obj: object, name_of_class: str, attribute: str) -> str:
    if lang is dlang:  # as 'lang' is the same object as 'dlang', use 'lang' only
        try:
            try:
                class_name = getattr(obj, name_of_class)
            except AttributeError:
                log.error("Class '{}' not found in 'en' language resource".format(name_of_class), exc_info=True)
                quit(1)
            return getattr(class_name, attribute)
        except AttributeError:
            log.error("Attribute '{}' not found in class '{}' of 'en' language resource".format(attribute, name_of_class), exc_info=True)
            quit(1)
        except Exception as e:
            log.error("Unable to load language string: {}".format(e), exc_info=True)
            quit(1)
    else:
        try:
            class_name = getattr(obj, name_of_class)
            return getattr(class_name, attribute)
        except AttributeError:
            try:
                class_name = getattr(dlang, name_of_class)
            except:
                log.error("Class '{}' not found in '{}' and default language resources".format(name_of_class, UBOT_LANG), exc_info=True)
                quit(1)
            try:
                def_attr = getattr(class_name, attribute)
                log.warning("Attribute '{}' not found in class '{}' of '{}' language resource "
                            "or class doesn't exist. Using default attribute".format(attribute, name_of_class, UBOT_LANG))
                return def_attr
            except AttributeError:
                log.error("Attribute '{}' not found in classes '{}' of "
                          "'{}' and default language resources ".format(attribute, name_of_class, UBOT_LANG), exc_info=True)
                quit(1)
        except Exception as e:
            log.error("Unable to load language string: {}".format(e), exc_info=True)
            quit(1)

class AdminText(object):
    ADMINS_IN_CHAT = getLangString(lang, _getframe().f_code.co_name, "ADMINS_IN_CHAT")
    UNABLE_GET_ADMINS = getLangString(lang, _getframe().f_code.co_name, "UNABLE_GET_ADMINS")
    FAIL_CHAT = getLangString(lang, _getframe().f_code.co_name, "FAIL_CHAT")
    NO_GROUP_CHAN = getLangString(lang, _getframe().f_code.co_name, "NO_GROUP_CHAN")
    NO_GROUP_CHAN_ARGS = getLangString(lang, _getframe().f_code.co_name, "NO_GROUP_CHAN_ARGS")
    NO_ADMIN = getLangString(lang, _getframe().f_code.co_name, "NO_ADMIN")
    NO_BAN_PRIV = getLangString(lang, _getframe().f_code.co_name, "NO_BAN_PRIV")
    DELETED_ACCOUNT = getLangString(lang, _getframe().f_code.co_name, "DELETED_ACCOUNT")
    CANNOT_BAN_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_BAN_SELF")
    CANNOT_BAN_ADMIN = getLangString(lang, _getframe().f_code.co_name, "CANNOT_BAN_ADMIN")
    BAN_SUCCESS_REMOTE = getLangString(lang, _getframe().f_code.co_name, "BAN_SUCCESS_REMOTE")
    BAN_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "BAN_SUCCESS")
    BAN_FAILED = getLangString(lang, _getframe().f_code.co_name, "BAN_FAILED")
    CANNOT_UNBAN_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_UNBAN_SELF")
    UNBAN_SUCCESS_REMOTE = getLangString(lang, _getframe().f_code.co_name, "UNBAN_SUCCESS_REMOTE")
    UNBAN_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "UNBAN_SUCCESS")
    UNBAN_FAILED = getLangString(lang, _getframe().f_code.co_name, "UNBAN_FAILED")
    CANNOT_KICK_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_KICK_SELF")
    KICK_SUCCESS_REMOTE = getLangString(lang, _getframe().f_code.co_name, "KICK_SUCCESS_REMOTE")
    KICK_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "KICK_SUCCESS")
    KICK_FAILED = getLangString(lang, _getframe().f_code.co_name, "KICK_FAILED")
    NOONE_TO_PROMOTE = getLangString(lang, _getframe().f_code.co_name, "NOONE_TO_PROMOTE")
    NOT_USER = getLangString(lang, _getframe().f_code.co_name, "NOT_USER")
    CANNOT_PROMOTE_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_PROMOTE_SELF")
    ADMIN_ALREADY_SELF = getLangString(lang, _getframe().f_code.co_name, "ADMIN_ALREADY_SELF")
    ADMIN_ALREADY = getLangString(lang, _getframe().f_code.co_name, "ADMIN_ALREADY")
    ADMIN_NOT_ENOUGH_PERMS = getLangString(lang, _getframe().f_code.co_name, "ADMIN_NOT_ENOUGH_PERMS")
    ADD_ADMINS_REQUIRED = getLangString(lang, _getframe().f_code.co_name, "ADD_ADMINS_REQUIRED")
    PROMOTE_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "PROMOTE_SUCCESS")
    TOO_MANY_ADMINS = getLangString(lang, _getframe().f_code.co_name, "TOO_MANY_ADMINS")
    EMOJI_NOT_ALLOWED = getLangString(lang, _getframe().f_code.co_name, "EMOJI_NOT_ALLOWED")
    GET_ENTITY_FAILED = getLangString(lang, _getframe().f_code.co_name, "GET_ENTITY_FAILED")
    PROMOTE_FAILED = getLangString(lang, _getframe().f_code.co_name, "PROMOTE_FAILED")
    NOONE_TO_DEMOTE = getLangString(lang, _getframe().f_code.co_name, "NOONE_TO_DEMOTE")
    CANNOT_DEMOTE_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_DEMOTE_SELF")
    DEMOTED_ALREADY = getLangString(lang, _getframe().f_code.co_name, "DEMOTED_ALREADY")
    DEMOTE_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "DEMOTE_SUCCESS")
    CANNOT_DEMOTE_ADMIN = getLangString(lang, _getframe().f_code.co_name, "CANNOT_DEMOTE_ADMIN")
    DEMOTE_FAILED = getLangString(lang, _getframe().f_code.co_name, "DEMOTE_FAILED")
    NO_GROUP_ARGS = getLangString(lang, _getframe().f_code.co_name, "NO_GROUP_ARGS")
    NOT_MUTE_SUB_CHAN = getLangString(lang, _getframe().f_code.co_name, "NOT_MUTE_SUB_CHAN")
    CANNOT_MUTE_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_MUTE_SELF")
    MUTE_SUCCESS_REMOTE = getLangString(lang, _getframe().f_code.co_name, "MUTE_SUCCESS_REMOTE")
    MUTE_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "MUTE_SUCCESS")
    MUTE_FAILED = getLangString(lang, _getframe().f_code.co_name, "MUTE_FAILED")
    NOT_UNMUTE_SUB_CHAN = getLangString(lang, _getframe().f_code.co_name, "NOT_UNMUTE_SUB_CHAN")
    CANNOT_UNMUTE_SELF = getLangString(lang, _getframe().f_code.co_name, "CANNOT_UNMUTE_SELF")
    UNMUTE_SUCCESS_REMOTE = getLangString(lang, _getframe().f_code.co_name, "UNMUTE_SUCCESS_REMOTE")
    UNMUTE_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "UNMUTE_SUCCESS")
    UNMUTE_FAILED = getLangString(lang, _getframe().f_code.co_name, "UNMUTE_FAILED")
    TRY_DEL_ACCOUNTS = getLangString(lang, _getframe().f_code.co_name, "TRY_DEL_ACCOUNTS")
    DEL_ACCS_COUNT = getLangString(lang, _getframe().f_code.co_name, "DEL_ACCS_COUNT")
    REM_DEL_ACCS_COUNT = getLangString(lang, _getframe().f_code.co_name, "REM_DEL_ACCS_COUNT")
    NO_DEL_ACCOUNTS = getLangString(lang, _getframe().f_code.co_name, "NO_DEL_ACCOUNTS")
    REPLY_TO_MSG = getLangString(lang, _getframe().f_code.co_name, "REPLY_TO_MSG")
    PIN_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "PIN_SUCCESS")
    PINNED_ALREADY = getLangString(lang, _getframe().f_code.co_name, "PINNED_ALREADY")
    PIN_FAILED = getLangString(lang, _getframe().f_code.co_name, "PIN_FAILED")
    LOG_PIN_MSG_ID = getLangString(lang, _getframe().f_code.co_name, "LOG_PIN_MSG_ID")

class StatusText(object):
    UBOT = getLangString(lang, _getframe().f_code.co_name, "UBOT")
    SYSTEM_STATUS = getLangString(lang, _getframe().f_code.co_name, "SYSTEM_STATUS")
    ONLINE = getLangString(lang, _getframe().f_code.co_name, "ONLINE")
    VER_TEXT = getLangString(lang, _getframe().f_code.co_name, "VER_TEXT")
    USR_TEXT = getLangString(lang, _getframe().f_code.co_name, "USR_TEXT")
    RTT = getLangString(lang, _getframe().f_code.co_name, "RTT")
    TELETON_VER = getLangString(lang, _getframe().f_code.co_name, "TELETON_VER")
    PYTHON_VER = getLangString(lang, _getframe().f_code.co_name, "PYTHON_VER")
    GITAPI_VER = getLangString(lang, _getframe().f_code.co_name, "GITAPI_VER")
    CASAPI_VER = getLangString(lang, _getframe().f_code.co_name, "CASAPI_VER")
    COMMIT_NUM = getLangString(lang, _getframe().f_code.co_name, "COMMIT_NUM")
    ERROR = getLangString(lang, _getframe().f_code.co_name, "ERROR")
    DAYS = getLangString(lang, _getframe().f_code.co_name, "DAYS")
    BOT_UPTIMETXT = getLangString(lang, _getframe().f_code.co_name, "BOT_UPTIMETXT")
    MAC_UPTIMETXT = getLangString(lang, _getframe().f_code.co_name, "MAC_UPTIMETXT")
    SHUTDOWN = getLangString(lang, _getframe().f_code.co_name, "SHUTDOWN")
    SHUTDOWN_LOG = getLangString(lang, _getframe().f_code.co_name, "SHUTDOWN_LOG")
    SYSD_NEOFETCH_REQ = getLangString(lang, _getframe().f_code.co_name, "SYSD_NEOFETCH_REQ")
    RESTART = getLangString(lang, _getframe().f_code.co_name, "RESTART")
    RESTART_LOG = getLangString(lang, _getframe().f_code.co_name, "RESTART_LOG")
    RESTARTED = getLangString(lang, _getframe().f_code.co_name, "RESTARTED")

class DeletionsText(object):
    CANNOT_DEL_MSG = getLangString(lang, _getframe().f_code.co_name, "CANNOT_DEL_MSG")
    UNABLE_DEL_MSG = getLangString(lang, _getframe().f_code.co_name, "UNABLE_DEL_MSG")
    DEL_MSG_FAILED = getLangString(lang, _getframe().f_code.co_name, "DEL_MSG_FAILED")
    REPLY_DEL_MSG = getLangString(lang, _getframe().f_code.co_name, "REPLY_DEL_MSG")
    NO_ADMIN_PURGE = getLangString(lang, _getframe().f_code.co_name, "NO_ADMIN_PURGE")
    NO_DEL_PRIV = getLangString(lang, _getframe().f_code.co_name, "NO_DEL_PRIV")
    PURGE_MSG_FAILED = getLangString(lang, _getframe().f_code.co_name, "PURGE_MSG_FAILED")
    PURGE_COMPLETE = getLangString(lang, _getframe().f_code.co_name, "PURGE_COMPLETE")
    LOG_PURGE = getLangString(lang, _getframe().f_code.co_name, "LOG_PURGE")
    REPLY_PURGE_MSG = getLangString(lang, _getframe().f_code.co_name, "REPLY_PURGE_MSG")

class ChatInfoText(object):
    CHAT_ANALYSIS = getLangString(lang, _getframe().f_code.co_name, "CHAT_ANALYSIS")
    EXCEPTION = getLangString(lang, _getframe().f_code.co_name, "EXCEPTION")
    REPLY_NOT_CHANNEL = getLangString(lang, _getframe().f_code.co_name, "REPLY_NOT_CHANNEL")
    CANNOT_GET_CHATINFO = getLangString(lang, _getframe().f_code.co_name, "CANNOT_GET_CHATINFO")
    YES_BOLD = getLangString(lang, _getframe().f_code.co_name, "YES_BOLD")
    NO_BOLD = getLangString(lang, _getframe().f_code.co_name, "NO_BOLD")
    YES = getLangString(lang, _getframe().f_code.co_name, "YES")
    NO = getLangString(lang, _getframe().f_code.co_name, "NO")
    CHATINFO = getLangString(lang, _getframe().f_code.co_name, "CHATINFO")
    CHAT_ID = getLangString(lang, _getframe().f_code.co_name, "CHAT_ID")
    CHATTYPE = getLangString(lang, _getframe().f_code.co_name, "CHATTYPE")
    CHAT_NAME = getLangString(lang, _getframe().f_code.co_name, "CHAT_NAME")
    FORMER_NAME = getLangString(lang, _getframe().f_code.co_name, "FORMER_NAME")
    CHAT_TYPE_PUBLIC = getLangString(lang, _getframe().f_code.co_name, "CHAT_TYPE_PUBLIC")
    CHAT_TYPE_PRIVATE = getLangString(lang, _getframe().f_code.co_name, "CHAT_TYPE_PRIVATE")
    CREATOR = getLangString(lang, _getframe().f_code.co_name, "CREATOR")
    CREATOR_WITH_URL = getLangString(lang, _getframe().f_code.co_name, "CREATOR_WITH_URL")
    CREATED_NOT_NULL = getLangString(lang, _getframe().f_code.co_name, "CREATED_NOT_NULL")
    CREATED_NULL = getLangString(lang, _getframe().f_code.co_name, "CREATED_NULL")
    DCID = getLangString(lang, _getframe().f_code.co_name, "DCID")
    CHAT_LEVEL = getLangString(lang, _getframe().f_code.co_name, "CHAT_LEVEL")
    VIEWABLE_MSG = getLangString(lang, _getframe().f_code.co_name, "VIEWABLE_MSG")
    DELETED_MSG = getLangString(lang, _getframe().f_code.co_name, "DELETED_MSG")
    SENT_MSG = getLangString(lang, _getframe().f_code.co_name, "SENT_MSG")
    SENT_MSG_PRED = getLangString(lang, _getframe().f_code.co_name, "SENT_MSG_PRED")
    MEMBERS = getLangString(lang, _getframe().f_code.co_name, "MEMBERS")
    ADMINS = getLangString(lang, _getframe().f_code.co_name, "ADMINS")
    BOT_COUNT = getLangString(lang, _getframe().f_code.co_name, "BOT_COUNT")
    ONLINE_MEM = getLangString(lang, _getframe().f_code.co_name, "ONLINE_MEM")
    RESTRICTED_COUNT = getLangString(lang, _getframe().f_code.co_name, "RESTRICTED_COUNT")
    BANNEDCOUNT = getLangString(lang, _getframe().f_code.co_name, "BANNEDCOUNT")
    GRUP_STICKERS = getLangString(lang, _getframe().f_code.co_name, "GRUP_STICKERS")
    LINKED_CHAT = getLangString(lang, _getframe().f_code.co_name, "LINKED_CHAT")
    LINKED_CHAT_TITLE = getLangString(lang, _getframe().f_code.co_name, "LINKED_CHAT_TITLE")
    SLW_MODE = getLangString(lang, _getframe().f_code.co_name, "SLW_MODE")
    SLW_MODE_TIME = getLangString(lang, _getframe().f_code.co_name, "SLW_MODE_TIME")
    SPER_GRP = getLangString(lang, _getframe().f_code.co_name, "SPER_GRP")
    RESTR = getLangString(lang, _getframe().f_code.co_name, "RESTR")
    PFORM = getLangString(lang, _getframe().f_code.co_name, "PFORM")
    REASON = getLangString(lang, _getframe().f_code.co_name, "REASON")
    TEXT = getLangString(lang, _getframe().f_code.co_name, "TEXT")
    SCAM = getLangString(lang, _getframe().f_code.co_name, "SCAM")
    VERFIED = getLangString(lang, _getframe().f_code.co_name, "VERFIED")
    DESCRIPTION = getLangString(lang, _getframe().f_code.co_name, "DESCRIPTION")
    UNKNOWN = getLangString(lang, _getframe().f_code.co_name, "UNKNOWN")
    INVALID_CH_GRP = getLangString(lang, _getframe().f_code.co_name, "INVALID_CH_GRP")
    PRV_BAN = getLangString(lang, _getframe().f_code.co_name, "PRV_BAN")
    NOT_EXISTS = getLangString(lang, _getframe().f_code.co_name, "NOT_EXISTS")
    CID_TEXT = getLangString(lang, _getframe().f_code.co_name, "CID_TEXT")
    CID_NO_GROUP = getLangString(lang, _getframe().f_code.co_name, "CID_NO_GROUP")
    LINK_INVALID_ID = getLangString(lang, _getframe().f_code.co_name, "LINK_INVALID_ID")
    LINK_INVALID_ID_GROUP = getLangString(lang, _getframe().f_code.co_name, "LINK_INVALID_ID_GROUP")
    LINK_TEXT = getLangString(lang, _getframe().f_code.co_name, "LINK_TEXT")
    NO_LINK = getLangString(lang, _getframe().f_code.co_name, "NO_LINK")
    NO_ADMIN_PERM = getLangString(lang, _getframe().f_code.co_name, "NO_ADMIN_PERM")
    NO_INVITE_PERM = getLangString(lang, _getframe().f_code.co_name, "NO_INVITE_PERM")
    UNABLE_GET_LINK = getLangString(lang, _getframe().f_code.co_name, "UNABLE_GET_LINK")

class MemberInfoText(object):
    SCAN = getLangString(lang, _getframe().f_code.co_name, "SCAN")
    FAIL_GET_MEMBER_CHAT = getLangString(lang, _getframe().f_code.co_name, "FAIL_GET_MEMBER_CHAT")
    FAIL_GET_MEMBER = getLangString(lang, _getframe().f_code.co_name, "FAIL_GET_MEMBER")
    NOT_SUPERGROUP = getLangString(lang, _getframe().f_code.co_name, "NOT_SUPERGROUP")
    INVALID_CHAT_ID = getLangString(lang, _getframe().f_code.co_name, "INVALID_CHAT_ID")
    ME_NOT_PART = getLangString(lang, _getframe().f_code.co_name, "ME_NOT_PART")
    USER_NOT_PART = getLangString(lang, _getframe().f_code.co_name, "USER_NOT_PART")
    FAIL_GET_PART = getLangString(lang, _getframe().f_code.co_name, "FAIL_GET_PART")
    DELETED_ACCOUNT = getLangString(lang, _getframe().f_code.co_name, "DELETED_ACCOUNT")
    TIME_FOREVER = getLangString(lang, _getframe().f_code.co_name, "TIME_FOREVER")
    ME_NOT_MEMBER = getLangString(lang, _getframe().f_code.co_name, "ME_NOT_MEMBER")
    USER_NOT_MEMBER = getLangString(lang, _getframe().f_code.co_name, "USER_NOT_MEMBER")
    MEMBERINFO = getLangString(lang, _getframe().f_code.co_name, "MEMBERINFO")
    GENERAL = getLangString(lang, _getframe().f_code.co_name, "GENERAL")
    MINFO_ID = getLangString(lang, _getframe().f_code.co_name, "MINFO_ID")
    FIRST_NAME = getLangString(lang, _getframe().f_code.co_name, "FIRST_NAME")
    USERNAME = getLangString(lang, _getframe().f_code.co_name, "USERNAME")
    GROUP = getLangString(lang, _getframe().f_code.co_name, "GROUP")
    GROUP_NAME = getLangString(lang, _getframe().f_code.co_name, "GROUP_NAME")
    STATUS = getLangString(lang, _getframe().f_code.co_name, "STATUS")
    STATUS_OWNER = getLangString(lang, _getframe().f_code.co_name, "STATUS_OWNER")
    STATUS_ADMIN = getLangString(lang, _getframe().f_code.co_name, "STATUS_ADMIN")
    STATUS_MEMBER = getLangString(lang, _getframe().f_code.co_name, "STATUS_MEMBER")
    STATUS_BANNED = getLangString(lang, _getframe().f_code.co_name, "STATUS_BANNED")
    STATUS_MUTED = getLangString(lang, _getframe().f_code.co_name, "STATUS_MUTED")
    STATUS_RESTRICTED = getLangString(lang, _getframe().f_code.co_name, "STATUS_RESTRICTED")
    STATUS_MUTED_NOT_MEMBER = getLangString(lang, _getframe().f_code.co_name, "STATUS_MUTED_NOT_MEMBER")
    STATUS_RESTRICTED_NOT_MEMBER = getLangString(lang, _getframe().f_code.co_name, "STATUS_RESTRICTED_NOT_MEMBER")
    STATUS_BANNED_UNTIL = getLangString(lang, _getframe().f_code.co_name, "STATUS_BANNED_UNTIL")
    STATUS_MUTED_UNTIL = getLangString(lang, _getframe().f_code.co_name, "STATUS_MUTED_UNTIL")
    STATUS_RESTRICTED_UNTIL = getLangString(lang, _getframe().f_code.co_name, "STATUS_RESTRICTED_UNTIL")
    STATUS_BANNED_BY = getLangString(lang, _getframe().f_code.co_name, "STATUS_BANNED_BY")
    STATUS_MUTED_BY = getLangString(lang, _getframe().f_code.co_name, "STATUS_MUTED_BY")
    STATUS_RESTRICTED_BY = getLangString(lang, _getframe().f_code.co_name, "STATUS_RESTRICTED_BY")
    ADMIN_TITLE = getLangString(lang, _getframe().f_code.co_name, "ADMIN_TITLE")
    PERMISSIONS = getLangString(lang, _getframe().f_code.co_name, "PERMISSIONS")
    CHANGE_GROUP_INFO = getLangString(lang, _getframe().f_code.co_name, "CHANGE_GROUP_INFO")
    DELETE_MESSAGES = getLangString(lang, _getframe().f_code.co_name, "DELETE_MESSAGES")
    BAN_USERS = getLangString(lang, _getframe().f_code.co_name, "BAN_USERS")
    INVITE_USERS = getLangString(lang, _getframe().f_code.co_name, "INVITE_USERS")
    PIN_MESSAGES = getLangString(lang, _getframe().f_code.co_name, "PIN_MESSAGES")
    ADD_ADMINS = getLangString(lang, _getframe().f_code.co_name, "ADD_ADMINS")
    ROOT_RIGHTS = getLangString(lang, _getframe().f_code.co_name, "ROOT_RIGHTS")
    SEND_MESSAGES = getLangString(lang, _getframe().f_code.co_name, "SEND_MESSAGES")
    SEND_MEDIA = getLangString(lang, _getframe().f_code.co_name, "SEND_MEDIA")
    SEND_GIFS_STICKERS = getLangString(lang, _getframe().f_code.co_name, "SEND_GIFS_STICKERS")
    SEND_POLLS = getLangString(lang, _getframe().f_code.co_name, "SEND_POLLS")
    EMBED_LINKS = getLangString(lang, _getframe().f_code.co_name, "EMBED_LINKS")
    WARN_ADMIN_PRIV = getLangString(lang, _getframe().f_code.co_name, "WARN_ADMIN_PRIV")
    PROMOTED_BY = getLangString(lang, _getframe().f_code.co_name, "PROMOTED_BY")
    ADDED_BY = getLangString(lang, _getframe().f_code.co_name, "ADDED_BY")
    JOIN_DATE = getLangString(lang, _getframe().f_code.co_name, "JOIN_DATE")

class MessagesText(object):
    NO_ADMIN = getLangString(lang, _getframe().f_code.co_name, "NO_ADMIN")
    FAIL_CHAT = getLangString(lang, _getframe().f_code.co_name, "FAIL_CHAT")
    CANNOT_COUNT_DEL = getLangString(lang, _getframe().f_code.co_name, "CANNOT_COUNT_DEL")
    CANNOT_QUERY_FWD = getLangString(lang, _getframe().f_code.co_name, "CANNOT_QUERY_FWD")
    FAIL_COUNT_MSG = getLangString(lang, _getframe().f_code.co_name, "FAIL_COUNT_MSG")
    USER_HAS_SENT = getLangString(lang, _getframe().f_code.co_name, "USER_HAS_SENT")
    USER_HAS_SENT_REMOTE = getLangString(lang, _getframe().f_code.co_name, "USER_HAS_SENT_REMOTE")
    CANNOT_COUNT_MSG = getLangString(lang, _getframe().f_code.co_name, "CANNOT_COUNT_MSG")
    CANNOT_COUNT_MSG_REMOTE = getLangString(lang, _getframe().f_code.co_name, "CANNOT_COUNT_MSG_REMOTE")
    NO_GROUP_CHAN = getLangString(lang, _getframe().f_code.co_name, "NO_GROUP_CHAN")
    PICKING_MEMBERS = getLangString(lang, _getframe().f_code.co_name, "PICKING_MEMBERS")
    FAILED_TO_PICK = getLangString(lang, _getframe().f_code.co_name, "FAILED_TO_PICK")
    TOP_USERS_TEXT = getLangString(lang, _getframe().f_code.co_name, "TOP_USERS_TEXT")
    TOP_USERS_MSGS = getLangString(lang, _getframe().f_code.co_name, "TOP_USERS_MSGS")

class ScrappersText(object):
    NO_TEXT_OR_MSG = getLangString(lang, _getframe().f_code.co_name, "NO_TEXT_OR_MSG")
    TRANSLATING = getLangString(lang, _getframe().f_code.co_name, "TRANSLATING")
    SAME_SRC_TARGET_LANG = getLangString(lang, _getframe().f_code.co_name, "SAME_SRC_TARGET_LANG")
    DETECTED_LANG = getLangString(lang, _getframe().f_code.co_name, "DETECTED_LANG")
    TARGET_LANG = getLangString(lang, _getframe().f_code.co_name, "TARGET_LANG")
    ORG_TEXT = getLangString(lang, _getframe().f_code.co_name, "ORG_TEXT")
    TRANS_TEXT = getLangString(lang, _getframe().f_code.co_name, "TRANS_TEXT")
    MSG_TOO_LONG = getLangString(lang, _getframe().f_code.co_name, "MSG_TOO_LONG")
    FAIL_TRANS_MSG = getLangString(lang, _getframe().f_code.co_name, "FAIL_TRANS_MSG")
    FAIL_TRANS_TEXT = getLangString(lang, _getframe().f_code.co_name, "FAIL_TRANS_TEXT")
    MEDIA_FORBIDDEN = getLangString(lang, _getframe().f_code.co_name, "MEDIA_FORBIDDEN")
    NO_TEXT_TTS = getLangString(lang, _getframe().f_code.co_name, "NO_TEXT_TTS")
    FAIL_TTS = getLangString(lang, _getframe().f_code.co_name, "FAIL_TTS")
    FAIL_API_REQ = getLangString(lang, _getframe().f_code.co_name, "FAIL_API_REQ")
    INVALID_LANG_CODE = getLangString(lang, _getframe().f_code.co_name, "INVALID_LANG_CODE")
    NOT_EGH_ARGS = getLangString(lang, _getframe().f_code.co_name, "NOT_EGH_ARGS")
    INVALID_AMOUNT_FORMAT = getLangString(lang, _getframe().f_code.co_name, "INVALID_AMOUNT_FORMAT")
    CC_ISO_UNSUPPORTED = getLangString(lang, _getframe().f_code.co_name, "CC_ISO_UNSUPPORTED")
    CC_HEADER = getLangString(lang, _getframe().f_code.co_name, "CC_HEADER")
    CFROM_CTO = getLangString(lang, _getframe().f_code.co_name, "CFROM_CTO")
    INVALID_INPUT = getLangString(lang, _getframe().f_code.co_name, "INVALID_INPUT")
    UNABLE_TO_CC = getLangString(lang, _getframe().f_code.co_name, "UNABLE_TO_CC")
    CC_LAST_UPDATE = getLangString(lang, _getframe().f_code.co_name, "CC_LAST_UPDATE")
    REPLY_TO_VM = getLangString(lang, _getframe().f_code.co_name, "REPLY_TO_VM")
    WORKS_WITH_VM_ONLY = getLangString(lang, _getframe().f_code.co_name, "WORKS_WITH_VM_ONLY")
    CONVERT_STT = getLangString(lang, _getframe().f_code.co_name, "CONVERT_STT")
    FAILED_LOAD_AUDIO = getLangString(lang, _getframe().f_code.co_name, "FAILED_LOAD_AUDIO")
    STT = getLangString(lang, _getframe().f_code.co_name, "STT")
    STT_TEXT = getLangString(lang, _getframe().f_code.co_name, "STT_TEXT")
    STT_NOT_RECOGNIZED = getLangString(lang, _getframe().f_code.co_name, "STT_NOT_RECOGNIZED")
    STT_REQ_FAILED = getLangString(lang, _getframe().f_code.co_name, "STT_REQ_FAILED")
    STT_OUTPUT_TOO_LONG = getLangString(lang, _getframe().f_code.co_name, "STT_OUTPUT_TOO_LONG")
    UNABLE_TO_STT = getLangString(lang, _getframe().f_code.co_name, "UNABLE_TO_STT")

class UserText(object):
    LEAVING = getLangString(lang, _getframe().f_code.co_name, "LEAVING")
    STATS_PROCESSING = getLangString(lang, _getframe().f_code.co_name, "STATS_PROCESSING")
    STATS_HEADER = getLangString(lang, _getframe().f_code.co_name, "STATS_HEADER")
    STATS_USERS = getLangString(lang, _getframe().f_code.co_name, "STATS_USERS")
    STATS_BLOCKED = getLangString(lang, _getframe().f_code.co_name, "STATS_BLOCKED")
    STATS_BOTS = getLangString(lang, _getframe().f_code.co_name, "STATS_BOTS")
    STATS_BLOCKED_TOTAL = getLangString(lang, _getframe().f_code.co_name, "STATS_BLOCKED_TOTAL")
    STATS_GROUPS = getLangString(lang, _getframe().f_code.co_name, "STATS_GROUPS")
    STATS_SGC_OWNER = getLangString(lang, _getframe().f_code.co_name, "STATS_SGC_OWNER")
    STATS_GROUPS_ADMIN = getLangString(lang, _getframe().f_code.co_name, "STATS_GROUPS_ADMIN")
    STATS_SUPER_GROUPS = getLangString(lang, _getframe().f_code.co_name, "STATS_SUPER_GROUPS")
    STATS_SG_ADMIN = getLangString(lang, _getframe().f_code.co_name, "STATS_SG_ADMIN")
    STATS_CHANNELS = getLangString(lang, _getframe().f_code.co_name, "STATS_CHANNELS")
    STATS_CHAN_ADMIN = getLangString(lang, _getframe().f_code.co_name, "STATS_CHAN_ADMIN")
    STATS_UNKNOWN = getLangString(lang, _getframe().f_code.co_name, "STATS_UNKNOWN")
    STATS_TOTAL = getLangString(lang, _getframe().f_code.co_name, "STATS_TOTAL")
    FETCH_INFO = getLangString(lang, _getframe().f_code.co_name, "FETCH_INFO")
    FAILED_FETCH_INFO = getLangString(lang, _getframe().f_code.co_name, "FAILED_FETCH_INFO")
    UNKNOWN = getLangString(lang, _getframe().f_code.co_name, "UNKNOWN")
    DELETED_ACCOUNT = getLangString(lang, _getframe().f_code.co_name, "DELETED_ACCOUNT")
    YES = getLangString(lang, _getframe().f_code.co_name, "YES")
    NO = getLangString(lang, _getframe().f_code.co_name, "NO")
    USR_NO_BIO = getLangString(lang, _getframe().f_code.co_name, "USR_NO_BIO")
    USR_INFO = getLangString(lang, _getframe().f_code.co_name, "USR_INFO")
    FIRST_NAME = getLangString(lang, _getframe().f_code.co_name, "FIRST_NAME")
    LAST_NAME = getLangString(lang, _getframe().f_code.co_name, "LAST_NAME")
    USERNAME = getLangString(lang, _getframe().f_code.co_name, "USERNAME")
    DCID = getLangString(lang, _getframe().f_code.co_name, "DCID")
    PROF_PIC_COUNT = getLangString(lang, _getframe().f_code.co_name, "PROF_PIC_COUNT")
    PROF_LINK = getLangString(lang, _getframe().f_code.co_name, "PROF_LINK")
    ISBOT = getLangString(lang, _getframe().f_code.co_name, "ISBOT")
    SCAMMER = getLangString(lang, _getframe().f_code.co_name, "SCAMMER")
    ISRESTRICTED = getLangString(lang, _getframe().f_code.co_name, "ISRESTRICTED")
    ISVERIFIED = getLangString(lang, _getframe().f_code.co_name, "ISVERIFIED")
    USR_ID = getLangString(lang, _getframe().f_code.co_name, "USR_ID")
    BIO = getLangString(lang, _getframe().f_code.co_name, "BIO")
    COMMON_SELF = getLangString(lang, _getframe().f_code.co_name, "COMMON_SELF")
    COMMON = getLangString(lang, _getframe().f_code.co_name, "COMMON")
    UNABLE_GET_IDS = getLangString(lang, _getframe().f_code.co_name, "UNABLE_GET_IDS")
    ORIGINAL_AUTHOR = getLangString(lang, _getframe().f_code.co_name, "ORIGINAL_AUTHOR")
    FORWARDER = getLangString(lang, _getframe().f_code.co_name, "FORWARDER")
    DUAL_HAS_ID_OF = getLangString(lang, _getframe().f_code.co_name, "DUAL_HAS_ID_OF")
    MY_ID = getLangString(lang, _getframe().f_code.co_name, "MY_ID")
    DEL_HAS_ID_OF = getLangString(lang, _getframe().f_code.co_name, "DEL_HAS_ID_OF")
    ID_NOT_ACCESSIBLE = getLangString(lang, _getframe().f_code.co_name, "ID_NOT_ACCESSIBLE")
    ORG_HAS_ID_OF = getLangString(lang, _getframe().f_code.co_name, "ORG_HAS_ID_OF")

class GeneralMessages(object):
    ERROR = getLangString(lang, _getframe().f_code.co_name, "ERROR")
    CHAT_NOT_USER = getLangString(lang, _getframe().f_code.co_name, "CHAT_NOT_USER")
    FAIL_FETCH_USER = getLangString(lang, _getframe().f_code.co_name, "FAIL_FETCH_USER")
    ENTITY_NOT_USER = getLangString(lang, _getframe().f_code.co_name, "ENTITY_NOT_USER")
    CALL_UREQ_FAIL = getLangString(lang, _getframe().f_code.co_name, "CALL_UREQ_FAIL")
    LOG_USER = getLangString(lang, _getframe().f_code.co_name, "LOG_USER")
    LOG_USERNAME = getLangString(lang, _getframe().f_code.co_name, "LOG_USERNAME")
    LOG_USER_ID = getLangString(lang, _getframe().f_code.co_name, "LOG_USER_ID")
    LOG_CHAT_TITLE = getLangString(lang, _getframe().f_code.co_name, "LOG_CHAT_TITLE")
    LOG_CHAT_LINK = getLangString(lang, _getframe().f_code.co_name, "LOG_CHAT_LINK")
    LOG_CHAT_ID = getLangString(lang, _getframe().f_code.co_name, "LOG_CHAT_ID")

class HelpText(object):
    INVALID_ARG = getLangString(lang, _getframe().f_code.co_name, "INVALID_ARG")
    USAGE = getLangString(lang, _getframe().f_code.co_name, "USAGE")
    NAME_OF_MODULE = getLangString(lang, _getframe().f_code.co_name, "NAME_OF_MODULE")
    AVAILABLE_MODULES = getLangString(lang, _getframe().f_code.co_name, "AVAILABLE_MODULES")
    DISABLED_MODULES = getLangString(lang, _getframe().f_code.co_name, "DISABLED_MODULES")
    NAME_MODULE = getLangString(lang, _getframe().f_code.co_name, "NAME_MODULE")
    MISSING_NAME_MODULE = getLangString(lang, _getframe().f_code.co_name, "MISSING_NAME_MODULE")
    MODULE_NOT_FOUND = getLangString(lang, _getframe().f_code.co_name, "MODULE_NOT_FOUND")
    MODULE_NO_DESC = getLangString(lang, _getframe().f_code.co_name, "MODULE_NO_DESC")
    MODULE_NO_USAGE = getLangString(lang, _getframe().f_code.co_name, "MODULE_NO_USAGE")
    ASTERISK = getLangString(lang, _getframe().f_code.co_name, "ASTERISK")

class WebToolsText(object):
    PING_SPEED = getLangString(lang, _getframe().f_code.co_name, "PING_SPEED")
    DCMESSAGE = getLangString(lang, _getframe().f_code.co_name, "DCMESSAGE")
    BAD_ARGS = getLangString(lang, _getframe().f_code.co_name, "BAD_ARGS")
    INVALID_HOST = getLangString(lang, _getframe().f_code.co_name, "INVALID_HOST")
    PINGER_VAL = getLangString(lang, _getframe().f_code.co_name, "PINGER_VAL")
    SPD_START = getLangString(lang, _getframe().f_code.co_name, "SPD_START")
    SPD_FAILED = getLangString(lang, _getframe().f_code.co_name, "SPD_FAILED")
    SPD_NO_RESULT = getLangString(lang, _getframe().f_code.co_name, "SPD_NO_RESULT")
    SPD_NO_MEMORY = getLangString(lang, _getframe().f_code.co_name, "SPD_NO_MEMORY")
    SPD_FAIL_SEND_RESULT = getLangString(lang, _getframe().f_code.co_name, "SPD_FAIL_SEND_RESULT")
    SPD_MEGABITS = getLangString(lang, _getframe().f_code.co_name, "SPD_MEGABITS")
    SPD_MEGABYTES = getLangString(lang, _getframe().f_code.co_name, "SPD_MEGABYTES")
    SPD_TIME = getLangString(lang, _getframe().f_code.co_name, "SPD_TIME")
    SPD_DOWNLOAD = getLangString(lang, _getframe().f_code.co_name, "SPD_DOWNLOAD")
    SPD_UPLOAD = getLangString(lang, _getframe().f_code.co_name, "SPD_UPLOAD")
    SPD_PING = getLangString(lang, _getframe().f_code.co_name, "SPD_PING")
    SPD_ISP = getLangString(lang, _getframe().f_code.co_name, "SPD_ISP")
    SPD_HOSTED_BY = getLangString(lang, _getframe().f_code.co_name, "SPD_HOSTED_BY")

class CasIntText(object):
    TOO_MANY_CAS = getLangString(lang, _getframe().f_code.co_name, "TOO_MANY_CAS")
    FAIL_UPLOAD_LIST = getLangString(lang, _getframe().f_code.co_name, "FAIL_UPLOAD_LIST")
    SEND_MEDIA_FORBIDDEN = getLangString(lang, _getframe().f_code.co_name, "SEND_MEDIA_FORBIDDEN")
    UPDATER_CONNECTING = getLangString(lang, _getframe().f_code.co_name, "UPDATER_CONNECTING")
    UPDATER_DOWNLOADING = getLangString(lang, _getframe().f_code.co_name, "UPDATER_DOWNLOADING")
    FAIL_APPEND_CAS = getLangString(lang, _getframe().f_code.co_name, "FAIL_APPEND_CAS")
    UPDATE_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "UPDATE_SUCCESS")
    NO_CONNECTION = getLangString(lang, _getframe().f_code.co_name, "NO_CONNECTION")
    TIMEOUT = getLangString(lang, _getframe().f_code.co_name, "TIMEOUT")
    UPDATE_FAILED = getLangString(lang, _getframe().f_code.co_name, "UPDATE_FAILED")
    GIVEN_ENT_INVALID = getLangString(lang, _getframe().f_code.co_name, "GIVEN_ENT_INVALID")
    AUTO_UPDATE = getLangString(lang, _getframe().f_code.co_name, "AUTO_UPDATE")
    CAS_CHECK_FAIL_ND = getLangString(lang, _getframe().f_code.co_name, "CAS_CHECK_FAIL_ND")
    CAS_CHECK_ND = getLangString(lang, _getframe().f_code.co_name, "CAS_CHECK_ND")
    PROCESSING = getLangString(lang, _getframe().f_code.co_name, "PROCESSING")
    DELETED_ACCOUNT = getLangString(lang, _getframe().f_code.co_name, "DELETED_ACCOUNT")
    USER_HEADER = getLangString(lang, _getframe().f_code.co_name, "USER_HEADER")
    USER_ID = getLangString(lang, _getframe().f_code.co_name, "USER_ID")
    FIRST_NAME = getLangString(lang, _getframe().f_code.co_name, "FIRST_NAME")
    LAST_NAME = getLangString(lang, _getframe().f_code.co_name, "LAST_NAME")
    USERNAME = getLangString(lang, _getframe().f_code.co_name, "USERNAME")
    CAS_DATA = getLangString(lang, _getframe().f_code.co_name, "CAS_DATA")
    RESULT = getLangString(lang, _getframe().f_code.co_name, "RESULT")
    OFFENSES = getLangString(lang, _getframe().f_code.co_name, "OFFENSES")
    BANNED_SINCE = getLangString(lang, _getframe().f_code.co_name, "BANNED_SINCE")
    USER_DETECTED = getLangString(lang, _getframe().f_code.co_name, "USER_DETECTED")
    USERS_DETECTED = getLangString(lang, _getframe().f_code.co_name, "USERS_DETECTED")
    NO_USERS = getLangString(lang, _getframe().f_code.co_name, "NO_USERS")
    NO_ADMIN = getLangString(lang, _getframe().f_code.co_name, "NO_ADMIN")
    CAS_CHECK_FAIL = getLangString(lang, _getframe().f_code.co_name, "CAS_CHECK_FAIL")

class GitHubText(object):
    INVALID_URL = getLangString(lang, _getframe().f_code.co_name, "INVALID_URL")
    NO_RELEASE = getLangString(lang, _getframe().f_code.co_name, "NO_RELEASE")
    AUTHOR_STR = getLangString(lang, _getframe().f_code.co_name, "AUTHOR_STR")
    RELEASE_NAME = getLangString(lang, _getframe().f_code.co_name, "RELEASE_NAME")
    ASSET = getLangString(lang, _getframe().f_code.co_name, "ASSET")
    SIZE = getLangString(lang, _getframe().f_code.co_name, "SIZE")
    DL_COUNT = getLangString(lang, _getframe().f_code.co_name, "DL_COUNT")
    INVALID_ARGS = getLangString(lang, _getframe().f_code.co_name, "INVALID_ARGS")

class TerminalText(object):
    BASH_ERROR = getLangString(lang, _getframe().f_code.co_name, "BASH_ERROR")

class MiscText(object):
    COIN_LANDED_VAL = getLangString(lang, _getframe().f_code.co_name, "COIN_LANDED_VAL")
    THRWING_COIN = getLangString(lang, _getframe().f_code.co_name, "THRWING_COIN")
    HEADS = getLangString(lang, _getframe().f_code.co_name, "HEADS")
    TAILS = getLangString(lang, _getframe().f_code.co_name, "TAILS")
    RAND_INVLD_ARGS = getLangString(lang, _getframe().f_code.co_name, "RAND_INVLD_ARGS")
    FRST_LIMIT_INVALID = getLangString(lang, _getframe().f_code.co_name, "FRST_LIMIT_INVALID")
    SCND_LIMIT_INVALID = getLangString(lang, _getframe().f_code.co_name, "SCND_LIMIT_INVALID")
    RAND_NUM_GEN = getLangString(lang, _getframe().f_code.co_name, "RAND_NUM_GEN")

class PackageManagerText(object):
    INVALID_ARG = getLangString(lang, _getframe().f_code.co_name, "INVALID_ARG")
    UPDATE_COMPLETE = getLangString(lang, _getframe().f_code.co_name, "UPDATE_COMPLETE")
    EMPTY_LIST = getLangString(lang, _getframe().f_code.co_name, "EMPTY_LIST")
    FILES_IN = getLangString(lang, _getframe().f_code.co_name, "FILES_IN")
    FILE_DSC = getLangString(lang, _getframe().f_code.co_name, "FILE_DSC")
    NO_PKG = getLangString(lang, _getframe().f_code.co_name, "NO_PKG")
    MOD_NOT_FOUND_INSTALL = getLangString(lang, _getframe().f_code.co_name, "MOD_NOT_FOUND_INSTALL")
    DONE_RBT = getLangString(lang, _getframe().f_code.co_name, "DONE_RBT")
    NO_UNINSTALL_MODULES = getLangString(lang, _getframe().f_code.co_name, "NO_UNINSTALL_MODULES")
    NO_UN_NAME = getLangString(lang, _getframe().f_code.co_name, "NO_UN_NAME")
    MULTIPLE_NAMES = getLangString(lang, _getframe().f_code.co_name, "MULTIPLE_NAMES")
    NOT_IN_USERSPACE = getLangString(lang, _getframe().f_code.co_name, "NOT_IN_USERSPACE")
    UNINSTALLING = getLangString(lang, _getframe().f_code.co_name, "UNINSTALLING")
    REBOOT_DONE_INS = getLangString(lang, _getframe().f_code.co_name, "REBOOT_DONE_INS")
    REBOOT_DONE_UNINS = getLangString(lang, _getframe().f_code.co_name, "REBOOT_DONE_UNINS")
    INSTALL_LOG = getLangString(lang, _getframe().f_code.co_name, "INSTALL_LOG")
    UNINSTALL_LOG = getLangString(lang, _getframe().f_code.co_name, "UNINSTALL_LOG")
    INSTALLED = getLangString(lang, _getframe().f_code.co_name, "INSTALLED")
    ALREADY_PRESENT = getLangString(lang, _getframe().f_code.co_name, "ALREADY_PRESENT")

class UpdaterText(object):
    UPDATES_NOT_RAN = getLangString(lang, _getframe().f_code.co_name, "UPDATES_NOT_RAN")
    NO_UPDATES = getLangString(lang, _getframe().f_code.co_name, "NO_UPDATES")
    UPDATING = getLangString(lang, _getframe().f_code.co_name, "UPDATING")
    UPD_ERROR = getLangString(lang, _getframe().f_code.co_name, "UPD_ERROR")
    UPD_SUCCESS = getLangString(lang, _getframe().f_code.co_name, "UPD_SUCCESS")
    UNKWN_BRANCH = getLangString(lang, _getframe().f_code.co_name, "UNKWN_BRANCH")
    LATS_VERSION = getLangString(lang, _getframe().f_code.co_name, "LATS_VERSION")
    UPD_AVAIL = getLangString(lang, _getframe().f_code.co_name, "UPD_AVAIL")
    RUN_UPD = getLangString(lang, _getframe().f_code.co_name, "RUN_UPD")
    CHLG_TOO_LONG = getLangString(lang, _getframe().f_code.co_name, "CHLG_TOO_LONG")
    RBT_COMPLETE = getLangString(lang, _getframe().f_code.co_name, "RBT_COMPLETE")
    UPD_LOG = getLangString(lang, _getframe().f_code.co_name, "UPD_LOG")

class SideloaderText(object):
    NOT_PY_FILE = getLangString(lang, _getframe().f_code.co_name, "NOT_PY_FILE")
    DLOADING = getLangString(lang, _getframe().f_code.co_name, "DLOADING")
    MODULE_EXISTS = getLangString(lang, _getframe().f_code.co_name, "MODULE_EXISTS")
    SUCCESS = getLangString(lang, _getframe().f_code.co_name, "SUCCESS")
    LOG = getLangString(lang, _getframe().f_code.co_name, "LOG")
    RBT_CPLT = getLangString(lang, _getframe().f_code.co_name, "RBT_CPLT")
    INVALID_FILE = getLangString(lang, _getframe().f_code.co_name, "INVALID_FILE")

class ModuleDescriptions(object):
    ADMIN_DESC = getLangString(lang, _getframe().f_code.co_name, "ADMIN_DESC")
    CHATINFO_DESC = getLangString(lang, _getframe().f_code.co_name, "CHATINFO_DESC")
    DELETIONS_DESC = getLangString(lang, _getframe().f_code.co_name, "DELETIONS_DESC")
    MEMBERINFO_DESC = getLangString(lang, _getframe().f_code.co_name, "MEMBERINFO_DESC")
    MESSAGES_DESC = getLangString(lang, _getframe().f_code.co_name, "MESSAGES_DESC")
    SCRAPPERS_DESC = getLangString(lang, _getframe().f_code.co_name, "SCRAPPERS_DESC")
    SYSTOOLS_DESC = getLangString(lang, _getframe().f_code.co_name, "SYSTOOLS_DESC")
    USER_DESC = getLangString(lang, _getframe().f_code.co_name, "USER_DESC")
    WEBTOOLS_DESC = getLangString(lang, _getframe().f_code.co_name, "WEBTOOLS_DESC")
    CAS_INTERFACE_DESC = getLangString(lang, _getframe().f_code.co_name, "CAS_INTERFACE_DESC")
    GITHUB_DESC = getLangString(lang, _getframe().f_code.co_name, "GITHUB_DESC")
    TERMINAL_DESC = getLangString(lang, _getframe().f_code.co_name, "TERMINAL_DESC")
    MISC_DESC = getLangString(lang, _getframe().f_code.co_name, "MISC_DESC")
    PACKAGE_MANAGER_DESC = getLangString(lang, _getframe().f_code.co_name, "PACKAGE_MANAGER_DESC")
    UPDATER_DESC = getLangString(lang, _getframe().f_code.co_name, "UPDATER_DESC")
    SIDELOADER_DESC = getLangString(lang, _getframe().f_code.co_name, "SIDELOADER_DESC")

class ModuleUsages(object):
    ADMIN_USAGE = getLangString(lang, _getframe().f_code.co_name, "ADMIN_USAGE")
    CHATINFO_USAGE = getLangString(lang, _getframe().f_code.co_name, "CHATINFO_USAGE")
    DELETIONS_USAGE = getLangString(lang, _getframe().f_code.co_name, "DELETIONS_USAGE")
    MEMBERINFO_USAGE = getLangString(lang, _getframe().f_code.co_name, "MEMBERINFO_USAGE")
    MESSAGES_USAGE = getLangString(lang, _getframe().f_code.co_name, "MESSAGES_USAGE")
    SCRAPPERS_USAGE = getLangString(lang, _getframe().f_code.co_name, "SCRAPPERS_USAGE")
    SYSTOOLS_USAGE = getLangString(lang, _getframe().f_code.co_name, "SYSTOOLS_USAGE")
    USER_USAGE = getLangString(lang, _getframe().f_code.co_name, "USER_USAGE")
    WEBTOOLS_USAGE = getLangString(lang, _getframe().f_code.co_name, "WEBTOOLS_USAGE")
    CAS_INTERFACE_USAGE = getLangString(lang, _getframe().f_code.co_name, "CAS_INTERFACE_USAGE")
    GITHUB_USAGE = getLangString(lang, _getframe().f_code.co_name, "GITHUB_USAGE")
    TERMINAL_USAGE = getLangString(lang, _getframe().f_code.co_name, "TERMINAL_USAGE")
    MISC_USAGE = getLangString(lang, _getframe().f_code.co_name, "MISC_USAGE")
    PACKAGE_MANAGER_USAGE = getLangString(lang, _getframe().f_code.co_name, "PACKAGE_MANAGER_USAGE")
    UPDATER_USAGE = getLangString(lang, _getframe().f_code.co_name, "UPDATER_USAGE")
    SIDELOADER_USAGE = getLangString(lang, _getframe().f_code.co_name, "SIDELOADER_USAGE")
